# TRAJECTORY OF A PROJECTILE ON EARTH:
#Setup the workspace:								####
setwd("~/R/Projectile Simulation")	#the directory holding main.R, projectileFunctions.R, projectile.csv, and planet.csv
# install.packages(c(		#only need to run this once, installs necessary packages
# 			"rgl",
# 			"scales",
# 			"Brobdingnag"
library(rgl)		#3d graphics
library(scales)		#scaled axes
# require(Brobdingnag)	#handling large numbers, not currently working
source("projectileFunctions.R")	#loads functions referenced here
projectile <- read.csv(		#loads preset projectile data
"projectile.csv",
comment.char= "#",
row.names= c("mass", "diameter")
)
planet <- read.csv(		#loads preset planet data
"planet.csv",
comment.char= "#",
row.names= c("g", "omega", "alpha", "rhoAir")
)
#Choose situation to simulate:							####
#Preset objects:
planetName 	<-	"Earth"		#options: "Mercury", "Venus", "Earth", "Mars"
projName 	<-	"BaseBall"	#options: "PPBall", "BaseBall", "BasketBall", "BowlingBall", "BeachBall", "CannonBall", "SteelBearing", "NeutroniumBB", "d20"
#Launch Parameters:
v0 		<-	100		#m/s, initial velocity
theta0 		<-	pi/3 		#radians, launch angle
latt		<-	45		#degrees, lattitude
#Tertiary operations:								####
#Projectile:
m <- projectile[projName][1,]	#kg, mass
D <- projectile[projName][2,] 	#m, diameter
#Environment:
g <- planet[planetName][1,] 		# m/s^2, surface gravity
omega <- planet[planetName][2,] 	#radians/s, siderial angular frequency
# omega <- 0.05
alpha <- planet[planetName][3,] 	#unitless between 1 and 2, fudge factor
rhoAir <- planet[planetName][4,]	#kg/m^3, atmospheric density
phi <- latt*2*pi/360 			#radians, lattitude
# Simulation Parameters:
x0 <- y0 <- z0 <- 0
X0 <- c(x0, y0, z0)		#m, starting position (cartesian approximation)
t0 <- 0 			#s, starting time
timeStep <- 0.01 			#s, step between calculations. If you set this too high, you may get overflowingly large k values.
timeOfFlight <- (2*v0*sin(theta0)/g)	#s, time to hit the ground
tMax <- 5*timeOfFlight 			#s, maximum time to simulate
# Calculate Trajectory:								####
# source("projectileFunctions.R")	#uncomment for easy rewriting and testing of functions
airResist <- QuadCorrProj(
m, D,
v0, theta0,
g, omega, alpha, rhoAir, phi,
X0, t0, timeStep, tMax
)
# Plot the Trajectory:								####
arTrunc <- subset(
airResist,
airResist$z >= 0
)
radScale <- sqrt(
max(airResist$z)^2
+max(airResist$x)^2
+max(airResist$y)^2
)/30
rgl.spheres(
x= airResist$x,
y= airResist$y,
z= airResist$z,
zlim= c(0, max(airResist$z)),
xlim= c(0, max(airResist$x)),
ylim= c(0, max(airResist$y)),
radius= radScale,
color= "red",
# 		xlim= c(0,10),
axis= TRUE
)
axes3d(edge= c("x--", "y--", "z--"))
nrTrunc <- subset(
subset(
airResist,
xNoResist <= max(airResist$x)
),
zNoResist <= max(airResist$z)
)
rgl.spheres(
x= nrTrunc$xNoResist,
y= 0,
z= nrTrunc$zNoResist,
color= "blue",
add= TRUE,
radius= radScale
)
cat("Red balls are with air and rotation, blue balls are without.")
source('~/Documents/Class Documents/HomeWork Rundown/2015 Spring/Week of 5-30/Modeling showcase/Link to Projectile Simulation/main.R')
source('~/.active-rstudio-document')
source('~/Desktop/Link to Modeling showcase/Link to Projectile Simulation/main.R')
source('~/Desktop/Link to Modeling showcase/Link to Projectile Simulation/main.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
